generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  role          Role      @default(user)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts  Account[]
  sessions  Session[]
  password  Password?
  totp      Totp?
  passkeys  PasskeyCredential[]
  backups   BackupCode[]
  logs      AuditLog[]

  @@index([email])
}

enum Role {
  user
  admin
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String    @id @default(cuid())
  userId       String
  sessionToken String    @unique
  expires      DateTime
  ip           String?
  userAgent    String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  revokedAt    DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Password {
  userId    String   @id
  hash      String
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Totp {
  userId     String    @id
  secret     String
  verified   Boolean   @default(false)
  lastUsedAt DateTime?
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BackupCode {
  id       String    @id @default(cuid())
  userId   String
  codeHash String
  usedAt   DateTime?
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PasskeyCredential {
  id         String    @id // base64url
  userId     String
  publicKey  Bytes
  counter    Int
  deviceName String?
  transports String?
  createdAt  DateTime  @default(now())
  lastUsedAt DateTime?
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AuditLog {
  id        String     @id @default(cuid())
  userId    String?
  event     AuditEvent
  ip        String?
  userAgent String?
  meta      Json?
  createdAt DateTime   @default(now())
  user      User?      @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([event, createdAt])
}

enum AuditEvent {
  LOGIN_SUCCESS
  LOGIN_FAILED
  EMAIL_VERIFY
  PASSWORD_RESET
  PASSKEY_REGISTER
  PASSKEY_LOGIN
  TOTP_ENROLL
}
